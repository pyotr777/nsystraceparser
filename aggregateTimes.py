#!/usr/bin/env python3

# Aggregate time of individual operations and NVTX areas from JSON files generated by runTraceSeries.

import os
import argparse
import pandas as pd
import json
import subprocess
import re

ver = '0.02'
description = 'Aggrgating data from JSON files, saving it to a CSV file.'
print('{} v.{}'.format(description, ver))

parser = argparse.ArgumentParser(description=description)
parser.add_argument("--dir",
                    '-d',
                    default=None,
                    required=True,
                    help="Directory with JSON traces to parse.")
parser.add_argument('--traces',
                    default='nsys_trace_([0-9]+).json',
                    help="Trace name pattern")
parser.add_argument('--events',
                    nargs='*',
                    default=None,
                    help="Patterns for searching events and NVTX regions.")

args = parser.parse_args()

list_command = "ls -1 " + args.dir
files = []
param_values = []
proc = subprocess.Popen(list_command.split(" "),
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        encoding='utf8')
for line in iter(proc.stdout.readline, ''):
    line = line.strip(" \n")
    m = re.match(args.traces, line)
    if m:
        files.append(os.path.abspath(os.path.join(args.dir, line)))
        param_values.append(m.group(1))

print('{} files in {}'.format(len(files), args.dir))

results = None
convert_traces = False
# Convert only if events parameter provided,
# otherwise read from CSV files.
if args.events is not None:
    convert_traces = True
for param, tracefile in zip(param_values, files):
    if convert_traces:
        events = '" "'.join(args.events)
        # Run
        # python3 parseOneTrace.py -f $tracefile --events $events
        command = 'python3 parseOneTrace.py -f {} --events "{}"'.format(
            tracefile, events)
        print(command)
        p = subprocess.run(command.split(' '),
                           stdin=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           bufsize=0,
                           shell=False)
        if p.returncode == 0:
            print('Finished OK')
        else:
            print(p.stdout.decode('utf-8'))
            print('ERROR')
            print(p.stderr.decode('utf-8'))
    # Read data from CSV file
    directory = os.path.dirname(tracefile)
    csvfile = ('').join(os.path.basename(tracefile).split('.')
                        [:-1])  # Filename without extension
    csvfile = csvfile + '.csv'
    csvfile = os.path.join(directory, csvfile)
    print('Reading {}'.format(csvfile))
    df_ = pd.read_csv(csvfile)
    df_['param'] = param
    #     display(df_.head())
    if results is None:
        results = df_
    else:
        results = results.append(df_, ignore_index=True)

results.sample(n=8)
dest_file = os.path.join(args.dir, "agg.csv")
results.to_csv(dest_file, index=False)
print('Saved to {}'.format(dest_file))
